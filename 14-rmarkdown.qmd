---
title: "14 R Markdown"
---

<center>

![Use markdown to make great reports](img/markdown.png){width="350px"}

</center>

::: callout-note
## Learning Objectives

By the end of this lesson, you will be able to:

-   Understand the basics of R Markdown
-   Create documents that combine code, output, and narrative text
-   Format text using Markdown syntax
-   Generate reports in multiple formats (HTML, PDF, Word)
-   Use R Markdown for reproducible data analysis
:::

## 1 What is R Markdown?

R Markdown is a file format that allows you to combine R code, its output, and narrative text in a single document. It's a powerful tool for creating reproducible reports, presentations, dashboards, and even websites.

::: callout-important
## Key Concept

R Markdown documents are plain text files that contain three important elements: 1. **YAML header** - Document metadata and formatting options 2. **Markdown text** - For narrative content 3. **Code chunks** - R code that can be executed
:::

## 2 Getting Started with R Markdown

To create an R Markdown document in RStudio:

1.  Click **File → New File → R Markdown**
2.  Choose a document type (HTML, PDF, or Word)
3.  Give your document a title and author name
4.  Click **OK**

This will generate a template R Markdown file that you can modify.

## 3 YAML Header

The YAML header appears at the top of the document between triple dashes (`---`):

``` yaml
---
title: "My Analysis Report"
author: "Your Name"
date: "2023-06-15"
output: html_document
---
```

You can customize various aspects of your document by adding options to the YAML header:

``` yaml
---
title: "My Analysis Report"
author: "Your Name"
date: "`r Sys.Date()`"
output:
  html_document:
    toc: true
    toc_float: true
    theme: flatly
    highlight: tango
    code_folding: show
---
```

## 4 Markdown Text

Markdown is a lightweight markup language that allows you to format text using simple syntax:

### 4.1 Basic Formatting

``` markdown
# Heading 1
## Heading 2
### Heading 3

**Bold text**
*Italic text*
~~Strikethrough~~

[Link text](https://example.com)
![Image alt text](path/to/image.png)
```

### 4.2 Lists

``` markdown
Unordered list:
- Item 1
- Item 2
  - Subitem 2.1
  - Subitem 2.2

Ordered list:
1. First item
2. Second item
   a. Subitem a
   b. Subitem b
```

### 4.3 Tables

``` markdown
| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| Row 1    | Data     | Data     |
| Row 2    | Data     | Data     |
```

## 5 Code Chunks

Code chunks in R Markdown allow you to execute R code and display its results:

```` markdown
```{r chunk-name, options}
# Your R code here
```
````

For example:

```` markdown
```{r summary-stats}
# Load data
data(mtcars)

# Calculate summary statistics
summary(mtcars)
```
````

### 5.1 Chunk Options

You can control how code chunks behave using options:

| Option               | Description                            |
|----------------------|----------------------------------------|
| `eval=TRUE/FALSE`    | Whether to evaluate the code           |
| `echo=TRUE/FALSE`    | Whether to show the code               |
| `include=TRUE/FALSE` | Whether to include the chunk in output |
| `message=TRUE/FALSE` | Whether to display messages            |
| `warning=TRUE/FALSE` | Whether to display warnings            |
| `fig.width=7`        | Figure width in inches                 |
| `fig.height=5`       | Figure height in inches                |

Example:

```` markdown
```{r plot, fig.width=8, fig.height=4, echo=FALSE}
# Create a plot without showing the code
plot(mtcars$wt, mtcars$mpg, 
     main="Car Weight vs. Mileage",
     xlab="Weight (1000 lbs)",
     ylab="Miles Per Gallon",
     pch=19, col="blue")
```
````

## 6 Inline Code

You can also include R code directly within text using backticks and `r`:

``` markdown
The average miles per gallon is `r mean(mtcars$mpg)`.
```

This will calculate the mean and insert the result directly into your text.

## 7 Generating Reports

To generate your report:

1.  Click the **Knit** button in RStudio
2.  Choose your desired output format
3.  View the generated document

R Markdown will: - Run all the code chunks - Generate all outputs (tables, plots, etc.) - Format the text according to Markdown syntax - Combine everything into a single document

## 8 Example: Data Analysis Report

Here's a simple example of an R Markdown document for data analysis:

```` markdown
---
title: "Car Performance Analysis"
author: "Data Scientist"
date: "`r Sys.Date()`"
output: html_document
---

### Introduction

This report analyzes the relationship between car characteristics and fuel efficiency.

### Data Overview

```{r data-summary}
# Load the mtcars dataset
data(mtcars)

# Display the first few rows
head(mtcars)

# Summary statistics
summary(mtcars[, c("mpg", "wt", "hp")])
```

### Visualization

```{r visualization, fig.width=10, fig.height=5}
# Create a scatterplot
plot(mtcars$wt, mtcars$mpg, 
     main="Car Weight vs. Mileage",
     xlab="Weight (1000 lbs)",
     ylab="Miles Per Gallon",
     pch=19, col="blue")

# Add a regression line
abline(lm(mpg ~ wt, data = mtcars), col = "red", lwd = 2)
```

### Statistical Analysis

```{r regression}
# Fit a linear model
model <- lm(mpg ~ wt + hp, data = mtcars)

# Display model summary
summary(model)
```

### Conclusion

Based on our analysis, there is a significant negative relationship between car weight and fuel efficiency. For every 1,000 lb increase in weight, the miles per gallon decreases by approximately `r abs(round(coef(model)[2], 2))` units.
````

## 9 Practice Exercises

### 9.1 Basic R Markdown

Create a new R Markdown document that includes: - A title and your name - A brief introduction - A code chunk that loads and summarizes a dataset of your choice - A visualization of the data - A brief conclusion

<br>

::: {.callout-tip collapse="true"}
## Solution: Basic R Markdown Document

Here's an example of a basic R Markdown document:

````markdown
---
title: "Analysis of Iris Dataset"
author: "Your Name"
date: "`r Sys.Date()`"
output: html_document
---

## Introduction

This document provides a brief analysis of the iris dataset, which contains measurements of sepal length, sepal width, petal length, and petal width for three species of iris flowers: setosa, versicolor, and virginica.

## Data Summary

```{r load-data}
# Load the iris dataset
data(iris)

# Display the structure of the dataset
str(iris)

# Summary statistics
summary(iris)
```

## Data Visualization

```{r visualization-md, fig.height=6, fig.width=8}
# Create a scatterplot of sepal dimensions by species
plot(iris$Sepal.Length, iris$Sepal.Width,
     main = "Sepal Dimensions by Iris Species",
     xlab = "Sepal Length (cm)",
     ylab = "Sepal Width (cm)",
     pch = 19,
     col = as.numeric(iris$Species))

# Add a legend
legend("topright",
       legend = levels(iris$Species),
       col = 1:3,
       pch = 19,
       title = "Species")
```

## Conclusion

The visualization reveals clear clustering of iris species based on sepal dimensions. Setosa irises (shown in black) have shorter sepals that are wider, while versicolor (red) and virginica (green) have longer, narrower sepals. This simple analysis demonstrates how morphological measurements can be used to distinguish between iris species.
````

This R Markdown document includes:
1. A YAML header with title, author, and date
2. A brief introduction to the dataset
3. A code chunk that loads and summarizes the iris dataset
4. A visualization showing the relationship between sepal dimensions by species
5. A brief conclusion interpreting the visualization

:::

<br>

### 9.2 Output Formats

Experiment with different output formats (HTML, PDF, Word) and observe the differences.

<br>

::: {.callout-tip collapse="true"}
## Solution: Output Format Comparison

To experiment with different output formats, you would modify the YAML header of your R Markdown document as follows:

**For HTML output:**
````yaml
---
title: "My Analysis"
author: "Your Name"
date: "`r Sys.Date()`"
output: html_document
---
````

**For PDF output:**
````yaml
---
title: "My Analysis"
author: "Your Name"
date: "`r Sys.Date()`"
output: pdf_document
---
````

**For Word output:**
````yaml
---
title: "My Analysis"
author: "Your Name"
date: "`r Sys.Date()`"
output: word_document
---
````

**For multiple output formats:**
````yaml
---
title: "My Analysis"
author: "Your Name"
date: "`r Sys.Date()`"
output:
  html_document:
    toc: true
    toc_float: true
  pdf_document:
    toc: true
  word_document:
    toc: true
---
````

**Key differences between formats:**

1. **HTML**:
   - Most interactive and customizable
   - Supports interactive elements (e.g., plotly plots, shiny apps)
   - Easy to share online
   - Supports custom CSS styling
   - Includes features like floating table of contents and code folding

2. **PDF**:
   - More formal appearance, suitable for printing
   - Requires LaTeX installation (TinyTeX recommended)
   - Better for precise layout control
   - Good for academic papers and reports
   - May have issues with very large tables or complex plots

3. **Word**:
   - Familiar format for non-technical collaborators
   - Easy for others to edit and add comments
   - Good for documents that need further editing
   - Limited in terms of formatting control compared to HTML/PDF
   - May have inconsistent rendering of complex elements

To fully experience these differences, you would need to knit the same document to each format and compare the results.
:::

<br>

### 9.3 Advanced Features

Create an R Markdown document with a table of contents, code folding, and a custom theme.

<br>

::: {.callout-tip collapse="true"}
## Solution: Advanced R Markdown Features

Here's an example of an R Markdown document with a table of contents, code folding, and a custom theme:

````markdown
---
title: "Advanced R Markdown Features"
author: "Your Name"
date: "`r Sys.Date()`"
output:
  html_document:
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
    toc_depth: 3
    number_sections: true
    theme: flatly
    highlight: tango
    code_folding: show
    df_print: paged
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  comment = "#>",
  fig.width = 8,
  fig.height = 6,
  out.width = "100%"
)
```

# Introduction

This document demonstrates advanced R Markdown features including a floating table of contents, code folding, and a custom theme.

# Data Analysis

## Loading Libraries

```{r libraries}
library(datasets)
```

## Data Exploration

Let's explore the built-in mtcars dataset:

```{r data-exploration}
data(mtcars)
str(mtcars)
summary(mtcars)
```

## Data Visualization

### Basic Plot

```{r basic-plot}
plot(mtcars$wt, mtcars$mpg,
     main = "Car Weight vs. Mileage",
     xlab = "Weight (1000 lbs)",
     ylab = "Miles Per Gallon",
     pch = 19, col = "blue")
```

### Grouped Analysis

```{r grouped-analysis}
# Add a categorical variable
mtcars$cyl_factor <- as.factor(mtcars$cyl)

# Boxplot by cylinder groups
boxplot(mpg ~ cyl_factor, data = mtcars,
        main = "MPG by Number of Cylinders",
        xlab = "Cylinders",
        ylab = "Miles Per Gallon",
        col = c("lightblue", "lightgreen", "lightpink"))
```

# Statistical Analysis

## Linear Regression

```{r regression-md}
# Fit a linear model
model <- lm(mpg ~ wt + hp, data = mtcars)

# Display model summary
summary(model)
```

## Diagnostic Plots

```{r diagnostics, fig.height=8}
par(mfrow = c(2, 2))
plot(model)
```

# Conclusion

This document has demonstrated several advanced R Markdown features:

1. A floating table of contents with section numbering
2. Code folding (try clicking the "Code" buttons)
3. The Flatly theme with Tango syntax highlighting
4. Customized chunk options
5. Multi-level headings that appear in the TOC
````

**Key features implemented:**

1. **Table of Contents**:
   - `toc: true` enables the table of contents
   - `toc_float: collapsed: false, smooth_scroll: true` creates a floating TOC
   - `toc_depth: 3` includes headings up to level 3
   - `number_sections: true` adds numbering to sections

2. **Code Folding**:
   - `code_folding: show` makes code chunks expandable/collapsible
   - Default is to show code, but readers can hide it

3. **Custom Theme**:
   - `theme: flatly` sets the document theme (other options include "default", "cerulean", "journal", "lumen", etc.)
   - `highlight: tango` sets the code highlighting style

4. **Additional Features**:
   - `df_print: paged` creates interactive tables for data frames
   - The setup chunk configures global options for all code chunks
:::

## Additional Resources

-   [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/)
-   [R Markdown Cheat Sheet](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)
-   [R Markdown Cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/)

